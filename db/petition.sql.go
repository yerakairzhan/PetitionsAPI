// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: petition.sql

package db

import (
	"context"
	"database/sql"
)

const createPetition = `-- name: CreatePetition :one
INSERT INTO petitions (title, description, created_at, number_votes, user_id)
VALUES ($1, $2, NOW(), 0, $3)
RETURNING id, title, description, created_at, number_votes, user_id
`

type CreatePetitionParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	UserID      int32  `json:"user_id"`
}

func (q *Queries) CreatePetition(ctx context.Context, arg CreatePetitionParams) (Petition, error) {
	row := q.db.QueryRowContext(ctx, createPetition, arg.Title, arg.Description, arg.UserID)
	var i Petition
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.NumberVotes,
		&i.UserID,
	)
	return i, err
}

const deletePetition = `-- name: DeletePetition :exec
DELETE FROM petitions
WHERE id = $1
`

func (q *Queries) DeletePetition(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePetition, id)
	return err
}

const getPetition = `-- name: GetPetition :one
SELECT id, title, description, created_at, number_votes
FROM petitions
WHERE id = $1
`

type GetPetitionRow struct {
	ID          int32         `json:"id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	NumberVotes sql.NullInt32 `json:"number_votes"`
}

func (q *Queries) GetPetition(ctx context.Context, id int32) (GetPetitionRow, error) {
	row := q.db.QueryRowContext(ctx, getPetition, id)
	var i GetPetitionRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.NumberVotes,
	)
	return i, err
}

const getPetitionByID = `-- name: GetPetitionByID :one
SELECT id, title, description, created_at, number_votes, user_id
FROM petitions
WHERE id = $1
`

func (q *Queries) GetPetitionByID(ctx context.Context, id int32) (Petition, error) {
	row := q.db.QueryRowContext(ctx, getPetitionByID, id)
	var i Petition
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.NumberVotes,
		&i.UserID,
	)
	return i, err
}

const listPetitions = `-- name: ListPetitions :many
SELECT id, title, description, created_at, number_votes
FROM petitions
ORDER BY created_at DESC
`

type ListPetitionsRow struct {
	ID          int32         `json:"id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	NumberVotes sql.NullInt32 `json:"number_votes"`
}

func (q *Queries) ListPetitions(ctx context.Context) ([]ListPetitionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPetitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPetitionsRow
	for rows.Next() {
		var i ListPetitionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.NumberVotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPetitionsByCreatedAtAsc = `-- name: ListPetitionsByCreatedAtAsc :many
SELECT id, title, description, created_at, number_votes, user_id
FROM petitions
ORDER BY created_at ASC
`

func (q *Queries) ListPetitionsByCreatedAtAsc(ctx context.Context) ([]Petition, error) {
	rows, err := q.db.QueryContext(ctx, listPetitionsByCreatedAtAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Petition
	for rows.Next() {
		var i Petition
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.NumberVotes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPetitionsByCreatedAtDesc = `-- name: ListPetitionsByCreatedAtDesc :many
SELECT id, title, description, created_at, number_votes, user_id
FROM petitions
ORDER BY created_at DESC
`

func (q *Queries) ListPetitionsByCreatedAtDesc(ctx context.Context) ([]Petition, error) {
	rows, err := q.db.QueryContext(ctx, listPetitionsByCreatedAtDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Petition
	for rows.Next() {
		var i Petition
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.NumberVotes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPetitionsByVotesAsc = `-- name: ListPetitionsByVotesAsc :many
SELECT id, title, description, created_at, number_votes, user_id
FROM petitions
ORDER BY number_votes ASC
`

func (q *Queries) ListPetitionsByVotesAsc(ctx context.Context) ([]Petition, error) {
	rows, err := q.db.QueryContext(ctx, listPetitionsByVotesAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Petition
	for rows.Next() {
		var i Petition
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.NumberVotes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPetitionsByVotesDesc = `-- name: ListPetitionsByVotesDesc :many
SELECT id, title, description, created_at, number_votes, user_id
FROM petitions
ORDER BY number_votes DESC
`

func (q *Queries) ListPetitionsByVotesDesc(ctx context.Context) ([]Petition, error) {
	rows, err := q.db.QueryContext(ctx, listPetitionsByVotesDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Petition
	for rows.Next() {
		var i Petition
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.NumberVotes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePetitionVotes = `-- name: UpdatePetitionVotes :exec
UPDATE petitions
SET number_votes = $1
WHERE id = $2
`

type UpdatePetitionVotesParams struct {
	NumberVotes sql.NullInt32 `json:"number_votes"`
	ID          int32         `json:"id"`
}

func (q *Queries) UpdatePetitionVotes(ctx context.Context, arg UpdatePetitionVotesParams) error {
	_, err := q.db.ExecContext(ctx, updatePetitionVotes, arg.NumberVotes, arg.ID)
	return err
}
